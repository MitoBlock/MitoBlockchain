// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mitoblockchaindev/discount_token.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type DiscountToken struct {
	Creator           string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Id                uint64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	Timestamp         string `protobuf:"bytes,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	ActivityName      string `protobuf:"bytes,4,opt,name=activityName,proto3" json:"activityName,omitempty"`
	Score             string `protobuf:"bytes,5,opt,name=score,proto3" json:"score,omitempty"`
	Message           string `protobuf:"bytes,6,opt,name=message,proto3" json:"message,omitempty"`
	DiscountValue     string `protobuf:"bytes,7,opt,name=discountValue,proto3" json:"discountValue,omitempty"`
	EligibleCompanies string `protobuf:"bytes,8,opt,name=eligibleCompanies,proto3" json:"eligibleCompanies,omitempty"`
	ItemType          string `protobuf:"bytes,9,opt,name=itemType,proto3" json:"itemType,omitempty"`
	ExpiryDate        string `protobuf:"bytes,10,opt,name=expiryDate,proto3" json:"expiryDate,omitempty"`
	CreatedAt         int64  `protobuf:"varint,11,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
}

func (m *DiscountToken) Reset()         { *m = DiscountToken{} }
func (m *DiscountToken) String() string { return proto.CompactTextString(m) }
func (*DiscountToken) ProtoMessage()    {}
func (*DiscountToken) Descriptor() ([]byte, []int) {
	return fileDescriptor_0694013e7fc11ffc, []int{0}
}
func (m *DiscountToken) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DiscountToken) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DiscountToken.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DiscountToken) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DiscountToken.Merge(m, src)
}
func (m *DiscountToken) XXX_Size() int {
	return m.Size()
}
func (m *DiscountToken) XXX_DiscardUnknown() {
	xxx_messageInfo_DiscountToken.DiscardUnknown(m)
}

var xxx_messageInfo_DiscountToken proto.InternalMessageInfo

func (m *DiscountToken) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *DiscountToken) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *DiscountToken) GetTimestamp() string {
	if m != nil {
		return m.Timestamp
	}
	return ""
}

func (m *DiscountToken) GetActivityName() string {
	if m != nil {
		return m.ActivityName
	}
	return ""
}

func (m *DiscountToken) GetScore() string {
	if m != nil {
		return m.Score
	}
	return ""
}

func (m *DiscountToken) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *DiscountToken) GetDiscountValue() string {
	if m != nil {
		return m.DiscountValue
	}
	return ""
}

func (m *DiscountToken) GetEligibleCompanies() string {
	if m != nil {
		return m.EligibleCompanies
	}
	return ""
}

func (m *DiscountToken) GetItemType() string {
	if m != nil {
		return m.ItemType
	}
	return ""
}

func (m *DiscountToken) GetExpiryDate() string {
	if m != nil {
		return m.ExpiryDate
	}
	return ""
}

func (m *DiscountToken) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func init() {
	proto.RegisterType((*DiscountToken)(nil), "mitoblockchaindev.mitoblockchaindev.DiscountToken")
}

func init() {
	proto.RegisterFile("mitoblockchaindev/discount_token.proto", fileDescriptor_0694013e7fc11ffc)
}

var fileDescriptor_0694013e7fc11ffc = []byte{
	// 319 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x91, 0xcf, 0x4e, 0x2a, 0x31,
	0x14, 0xc6, 0xe9, 0xf0, 0xbf, 0xf7, 0x72, 0x93, 0xdb, 0xb8, 0x68, 0x8c, 0x69, 0x08, 0x1a, 0x43,
	0xa2, 0x81, 0x85, 0x4f, 0xa0, 0xe2, 0xd6, 0x05, 0x21, 0x2e, 0xdc, 0x98, 0x32, 0x73, 0x82, 0x27,
	0x4c, 0xa7, 0x93, 0xe9, 0x81, 0x30, 0x6f, 0xe1, 0x63, 0xb9, 0x64, 0xa9, 0x3b, 0x03, 0x2f, 0x62,
	0x28, 0x20, 0x92, 0x59, 0x7e, 0xbf, 0xef, 0xd7, 0xe4, 0xf4, 0x1c, 0x7e, 0x69, 0x90, 0xec, 0x38,
	0xb6, 0xe1, 0x34, 0x7c, 0xd5, 0x98, 0x44, 0x30, 0xef, 0x47, 0xe8, 0x42, 0x3b, 0x4b, 0xe8, 0x85,
	0xec, 0x14, 0x92, 0x5e, 0x9a, 0x59, 0xb2, 0xe2, 0xbc, 0xe0, 0xf5, 0x0a, 0xa4, 0xf3, 0x19, 0xf0,
	0xd6, 0x60, 0xf7, 0x7a, 0xb4, 0x79, 0x2c, 0x24, 0xaf, 0x87, 0x19, 0x68, 0xb2, 0x99, 0x64, 0x6d,
	0xd6, 0x6d, 0x0e, 0xf7, 0x51, 0xfc, 0xe3, 0x01, 0x46, 0x32, 0x68, 0xb3, 0x6e, 0x65, 0x18, 0x60,
	0x24, 0xce, 0x78, 0x93, 0xd0, 0x80, 0x23, 0x6d, 0x52, 0x59, 0xf6, 0xee, 0x01, 0x88, 0x0e, 0xff,
	0xab, 0x43, 0xc2, 0x39, 0x52, 0xfe, 0xa8, 0x0d, 0xc8, 0x8a, 0x17, 0x8e, 0x98, 0x38, 0xe1, 0x55,
	0x17, 0xda, 0x0c, 0x64, 0xd5, 0x97, 0xdb, 0xb0, 0x99, 0xc0, 0x80, 0x73, 0x7a, 0x02, 0xb2, 0xb6,
	0x9d, 0x60, 0x17, 0xc5, 0x05, 0x6f, 0xed, 0xbf, 0xfa, 0xa4, 0xe3, 0x19, 0xc8, 0xba, 0xef, 0x8f,
	0xa1, 0xb8, 0xe6, 0xff, 0x21, 0xc6, 0x09, 0x8e, 0x63, 0xb8, 0xb7, 0x26, 0xd5, 0x09, 0x82, 0x93,
	0x0d, 0x6f, 0x16, 0x0b, 0x71, 0xca, 0x1b, 0x48, 0x60, 0x46, 0x79, 0x0a, 0xb2, 0xe9, 0xa5, 0x9f,
	0x2c, 0x14, 0xe7, 0xb0, 0x48, 0x31, 0xcb, 0x07, 0x9a, 0x40, 0x72, 0xdf, 0xfe, 0x22, 0x9b, 0x0d,
	0xf8, 0xe5, 0x40, 0x74, 0x4b, 0xf2, 0x4f, 0x9b, 0x75, 0xcb, 0xc3, 0x03, 0xb8, 0x7b, 0x78, 0x5f,
	0x29, 0xb6, 0x5c, 0x29, 0xf6, 0xb5, 0x52, 0xec, 0x6d, 0xad, 0x4a, 0xcb, 0xb5, 0x2a, 0x7d, 0xac,
	0x55, 0xe9, 0xf9, 0xaa, 0x78, 0xc2, 0x45, 0xbf, 0xc8, 0x28, 0x4f, 0xc1, 0x8d, 0x6b, 0xfe, 0x9c,
	0x37, 0xdf, 0x01, 0x00, 0x00, 0xff, 0xff, 0xed, 0x5e, 0x92, 0x0c, 0xf8, 0x01, 0x00, 0x00,
}

func (m *DiscountToken) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DiscountToken) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DiscountToken) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CreatedAt != 0 {
		i = encodeVarintDiscountToken(dAtA, i, uint64(m.CreatedAt))
		i--
		dAtA[i] = 0x58
	}
	if len(m.ExpiryDate) > 0 {
		i -= len(m.ExpiryDate)
		copy(dAtA[i:], m.ExpiryDate)
		i = encodeVarintDiscountToken(dAtA, i, uint64(len(m.ExpiryDate)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.ItemType) > 0 {
		i -= len(m.ItemType)
		copy(dAtA[i:], m.ItemType)
		i = encodeVarintDiscountToken(dAtA, i, uint64(len(m.ItemType)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.EligibleCompanies) > 0 {
		i -= len(m.EligibleCompanies)
		copy(dAtA[i:], m.EligibleCompanies)
		i = encodeVarintDiscountToken(dAtA, i, uint64(len(m.EligibleCompanies)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.DiscountValue) > 0 {
		i -= len(m.DiscountValue)
		copy(dAtA[i:], m.DiscountValue)
		i = encodeVarintDiscountToken(dAtA, i, uint64(len(m.DiscountValue)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintDiscountToken(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Score) > 0 {
		i -= len(m.Score)
		copy(dAtA[i:], m.Score)
		i = encodeVarintDiscountToken(dAtA, i, uint64(len(m.Score)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ActivityName) > 0 {
		i -= len(m.ActivityName)
		copy(dAtA[i:], m.ActivityName)
		i = encodeVarintDiscountToken(dAtA, i, uint64(len(m.ActivityName)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Timestamp) > 0 {
		i -= len(m.Timestamp)
		copy(dAtA[i:], m.Timestamp)
		i = encodeVarintDiscountToken(dAtA, i, uint64(len(m.Timestamp)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Id != 0 {
		i = encodeVarintDiscountToken(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintDiscountToken(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintDiscountToken(dAtA []byte, offset int, v uint64) int {
	offset -= sovDiscountToken(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *DiscountToken) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovDiscountToken(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovDiscountToken(uint64(m.Id))
	}
	l = len(m.Timestamp)
	if l > 0 {
		n += 1 + l + sovDiscountToken(uint64(l))
	}
	l = len(m.ActivityName)
	if l > 0 {
		n += 1 + l + sovDiscountToken(uint64(l))
	}
	l = len(m.Score)
	if l > 0 {
		n += 1 + l + sovDiscountToken(uint64(l))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovDiscountToken(uint64(l))
	}
	l = len(m.DiscountValue)
	if l > 0 {
		n += 1 + l + sovDiscountToken(uint64(l))
	}
	l = len(m.EligibleCompanies)
	if l > 0 {
		n += 1 + l + sovDiscountToken(uint64(l))
	}
	l = len(m.ItemType)
	if l > 0 {
		n += 1 + l + sovDiscountToken(uint64(l))
	}
	l = len(m.ExpiryDate)
	if l > 0 {
		n += 1 + l + sovDiscountToken(uint64(l))
	}
	if m.CreatedAt != 0 {
		n += 1 + sovDiscountToken(uint64(m.CreatedAt))
	}
	return n
}

func sovDiscountToken(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDiscountToken(x uint64) (n int) {
	return sovDiscountToken(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DiscountToken) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDiscountToken
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DiscountToken: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DiscountToken: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDiscountToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDiscountToken
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDiscountToken
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDiscountToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDiscountToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDiscountToken
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDiscountToken
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Timestamp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDiscountToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDiscountToken
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDiscountToken
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActivityName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDiscountToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDiscountToken
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDiscountToken
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Score = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDiscountToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDiscountToken
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDiscountToken
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiscountValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDiscountToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDiscountToken
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDiscountToken
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DiscountValue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EligibleCompanies", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDiscountToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDiscountToken
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDiscountToken
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EligibleCompanies = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDiscountToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDiscountToken
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDiscountToken
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ItemType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpiryDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDiscountToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDiscountToken
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDiscountToken
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExpiryDate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			m.CreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDiscountToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDiscountToken(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDiscountToken
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDiscountToken(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDiscountToken
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDiscountToken
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDiscountToken
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDiscountToken
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDiscountToken
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDiscountToken
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDiscountToken        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDiscountToken          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDiscountToken = fmt.Errorf("proto: unexpected end of group")
)
